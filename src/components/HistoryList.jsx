import React, { useState, useEffect } from 'react';
import axios from 'axios';
import './HistoryList.css';

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
console.log("HistoryList component loaded");

const ACTION_ICONS = {
  'generate_task': 'üìù',
  'find_resources': 'üîé',
  'answer_question': '‚ùì',
  'create_lesson_plan': 'üìö',
  'get_checklist': '‚úÖ',
  'get_prompt_guide': 'üìã',
  'get_study_materials': 'üìö',
  'get_feedback': 'üìä',
  'create_test': 'üìë'
};

const ACTION_NAMES = {
  'generate_task': '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞–Ω–∏—è',
  'find_resources': '–ü–æ–∏—Å–∫ —Ä–µ—Å—É—Ä—Å–æ–≤',
  'answer_question': '–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å',
  'create_lesson_plan': '–ü–ª–∞–Ω —É—Ä–æ–∫–∞',
  'get_checklist': '–ß–µ–∫-–ª–∏—Å—Ç',
  'get_prompt_guide': '–ì–∞–π–¥ –∑–∞–ø—Ä–æ—Å–æ–≤',
  'get_study_materials': '–£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
  'get_feedback': '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å',
  'create_test': '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞'
};

// –¢–µ—Å—Ç–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏, –µ—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
const TEST_HISTORY = [
  {
    id: '1',
    timestamp: new Date().toISOString(),
    action_type: 'answer_question',
    query: '–ß—Ç–æ —Ç–∞–∫–æ–µ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?',
    response: '–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –ø–æ–¥—Ä–∞–∑–¥–µ–ª –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π —Ñ–æ–∫—É—Å–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Å–ø–æ—Å–æ–±–∞ –æ–±—É—á–µ–Ω–∏—è –ª—é–¥–µ–π, –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–ª—É—á—à–∞—è —Å–≤–æ—é —Ç–æ—á–Ω–æ—Å—Ç—å.'
  },
  {
    id: '2', 
    timestamp: new Date(Date.now() - 86400000).toISOString(),
    action_type: 'generate_task',
    query: '–°–æ–∑–¥–∞–π –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –Ω–∞ Python',
    response: '–ó–∞–¥–∞–Ω–∏–µ: –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É –Ω–∞ Python, –∫–æ—Ç–æ—Ä–∞—è –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –∏ –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–ª–æ–≤, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–æ–≤.'
  }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown-–ø–æ–¥–æ–±–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
const formatResponse = (text) => {
  if (!text) return [];
  
  // –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∫–æ–¥–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤
  let processedText = text;
  const codeBlockRegex = /```([\s\S]*?)```/g;
  const codeBlocks = [];
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥–æ–≤—ã–µ –±–ª–æ–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –∏ –∑–∞–º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ –º–∞—Ä–∫–µ—Ä—ã
  processedText = processedText.replace(codeBlockRegex, (match, code, index) => {
    const marker = `CODE_BLOCK_MARKER_${codeBlocks.length}`;
    codeBlocks.push(code);
    return marker;
  });
  
  // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –∞–±–∑–∞—Ü—ã
  const paragraphs = processedText.split('\n\n');
  
  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∞–±–∑–∞—Ü
  return paragraphs.map((paragraph, index) => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∞–±–∑–∞—Ü—ã
    if (!paragraph.trim()) return null;
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥–æ–≤—ã–µ –±–ª–æ–∫–∏
    if (paragraph.includes('CODE_BLOCK_MARKER_')) {
      const blockIndex = parseInt(paragraph.match(/CODE_BLOCK_MARKER_(\d+)/)[1]);
      const code = codeBlocks[blockIndex];
      return (
        <pre key={`code-${index}`} className="response-code-block">
          <code>{code}</code>
        </pre>
      );
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (# –ó–∞–≥–æ–ª–æ–≤–æ–∫)
    if (paragraph.startsWith('# ')) {
      return (
        <h2 key={index} className="response-heading">
          {paragraph.substring(2)}
        </h2>
      );
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (## –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫)
    if (paragraph.startsWith('## ')) {
      return (
        <h3 key={index} className="response-subheading">
          {paragraph.substring(3)}
        </h3>
      );
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
    if (paragraph.includes('\n- ')) {
      const [listTitle, ...listItems] = paragraph.split('\n- ');
      return (
        <div key={index} className="response-list">
          {listTitle && listTitle.trim() && <p>{listTitle}</p>}
          <ul>
            {listItems.map((item, itemIndex) => (
              <li key={itemIndex}>{item}</li>
            ))}
          </ul>
        </div>
      );
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
    if (/\n\d+\. /.test(paragraph)) {
      const lines = paragraph.split('\n');
      const titleLine = lines[0].match(/^\d+\. /) ? '' : lines[0];
      const listItems = lines.filter(line => line.match(/^\d+\. /));
      
      return (
        <div key={index} className="response-list">
          {titleLine && <p>{titleLine}</p>}
          <ol>
            {listItems.map((item, itemIndex) => {
              const content = item.replace(/^\d+\.\s+/, '');
              return content ? <li key={itemIndex}>{content}</li> : null;
            })}
          </ol>
        </div>
      );
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
    if (paragraph.includes('`') && !paragraph.includes('```')) {
      const parts = paragraph.split('`');
      if (parts.length > 1) {
        return (
          <p key={index}>
            {parts.map((part, partIndex) => {
              if (partIndex % 2 === 0) {
                return part;
              } else {
                return <code key={`inline-code-${partIndex}`} className="inline-code">{part}</code>;
              }
            })}
          </p>
        );
      }
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∞–±–∑–∞—Ü–µ–≤ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–æ–∫
    const lines = paragraph.split('\n');
    if (lines.length > 1) {
      return (
        <div key={index} className="response-multiline">
          {lines.map((line, lineIndex) => (
            <p key={lineIndex}>{line}</p>
          ))}
        </div>
      );
    }
    
    // –û–±—ã—á–Ω—ã–π –∞–±–∑–∞—Ü
    return <p key={index}>{paragraph}</p>;
  }).filter(Boolean); // –£–¥–∞–ª—è–µ–º null —ç–ª–µ–º–µ–Ω—Ç—ã
};

const HistoryList = () => {
  const [history, setHistory] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [expandedItem, setExpandedItem] = useState(null);
  const [useTestData, setUseTestData] = useState(false);
  
  // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp
  const userId = window.Telegram?.WebApp?.initDataUnsafe?.user?.id || 'demo_user';
  console.log("HistoryList - Current user ID:", userId);
  
  useEffect(() => {
    const fetchHistory = async () => {
      try {
        setLoading(true);
        console.log("HistoryList - Fetching history for user:", userId);
        
        // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–µ—Å—Ç–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
        try {
          const testResponse = await axios.get('/api/test');
          console.log("HistoryList - API test response:", testResponse.data);
        } catch (testErr) {
          console.error("HistoryList - API test failed:", testErr);
        }
        
        const response = await axios.get(`/api/history/${userId}`);
        console.log("HistoryList - History response:", response.data);
        
        if (response.data.success) {
          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (–Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
          const sortedHistory = response.data.history.sort((a, b) => 
            new Date(b.timestamp) - new Date(a.timestamp)
          );
          
          // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ isFavorite, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
          const historyWithFavorites = sortedHistory.map(item => ({
            ...item,
            isFavorite: item.isFavorite || false
          }));
          
          setHistory(historyWithFavorites);
        } else {
          console.error("HistoryList - API returned error:", response.data);
          setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é');
          setUseTestData(true);
        }
      } catch (err) {
        console.error("HistoryList - Error fetching history:", err);
        setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: ' + err.message);
        setUseTestData(true);
      } finally {
        setLoading(false);
      }
    };
    
    fetchHistory();
  }, [userId]);
  
  // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
  useEffect(() => {
    if (useTestData) {
      console.log("HistoryList - Using test data instead");
      setHistory(TEST_HISTORY);
    }
  }, [useTestData]);
  
  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return new Intl.DateTimeFormat('ru-RU', {
      day: '2-digit',
      month: '2-digit', 
      year: 'numeric',
      hour: '2-digit', 
      minute: '2-digit'
    }).format(date);
  };
  
  const toggleExpand = (id) => {
    if (expandedItem === id) {
      setExpandedItem(null);
    } else {
      setExpandedItem(id);
    }
  };
  
  if (loading) {
    return <div className="history-loading">–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏...</div>;
  }
  
  if (error && !useTestData) {
    return (
      <div className="history-error">
        <p>{error}</p>
        <button 
          onClick={() => setUseTestData(true)}
          className="test-data-button"
        >
          –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        </button>
      </div>
    );
  }
  
  if (history.length === 0) {
    return <div className="history-empty">–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –ø—É—Å—Ç–∞</div>;
  }
  
  return (
    <div className="history-list">
      <h2>–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ {useTestData && '(—Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)'}</h2>
      
      {history.map((item) => (
        <div 
          key={item.id} 
          className={`history-item ${expandedItem === item.id ? 'expanded' : ''}`}
          onClick={() => toggleExpand(item.id)}
        >
          <div className="history-item-header">
            <div className="history-item-icon">
              {ACTION_ICONS[item.action_type] || 'ü§ñ'}
            </div>
            <div className="history-item-info">
              <div className="history-item-title">
                {ACTION_NAMES[item.action_type] || '–ó–∞–ø—Ä–æ—Å –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É'}
              </div>
              <div className="history-item-query">{item.query}</div>
              <div className="history-item-date">{formatDate(item.timestamp)}</div>
            </div>
          </div>
          
          {expandedItem === item.id && (
            <div className="history-item-content">
              <div className="history-query">
                <strong>–ó–∞–ø—Ä–æ—Å</strong>
                <p>{item.query}</p>
              </div>
              <div className="history-response">
                <strong>–û—Ç–≤–µ—Ç</strong>
                <div className="response-content">
                  {formatResponse(item.response)}
                </div>
              </div>
              
              {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç–≤–µ—Ç–∞ */}
              <div style={{ textAlign: 'right', marginTop: '12px' }}>
                <button 
                  onClick={(e) => {
                    e.stopPropagation();
                    window.navigator.clipboard.writeText(item.response);
                    alert('–û—Ç–≤–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞');
                  }}
                  className="test-data-button"
                  style={{ 
                    fontSize: '13px', 
                    padding: '6px 12px',
                    backgroundColor: 'rgba(0, 136, 204, 0.8)'
                  }}
                >
                  –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç
                </button>
              </div>
            </div>
          )}
        </div>
      ))}
    </div>
  );
};

export default HistoryList; 